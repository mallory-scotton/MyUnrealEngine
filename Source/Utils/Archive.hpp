///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils/Types.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace TKD
///////////////////////////////////////////////////////////////////////////////
namespace TKD
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Archive
{
protected:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    FInt32 mVersion;        //<!
    bool mIsLoading;        //<!
    bool mIsSaving;         //<!
    bool mAllowSeek;        //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Archive(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param value
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Archive& operator<<(FString& value);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    /// \tparam Size
    ///
    /// \param value
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T, FUint64 Size>
    Archive& operator<<(TArray<T, Size>& value)
    {
        FUint64 size = value.size();

        *this << size;
        for (FUint64 i = 0; i < size; i++) {
            *this << value[i];
        }
        return (*this);
    }

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    ///
    /// \param value
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T>
    Archive& operator<<(TVector<T>& value)
    {
        FUint64 size = value.size();

        *this << size;
        if (mIsLoading) {
            value.clear();
            value.resize(size);
        }
        for (FUint64 i = 0; i < size; i++) {
            *this << value[i];
        }
        return (*this);
    }

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    /// \tparam U
    ///
    /// \param value
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T, typename U>
    Archive& operator<<(TMap<T, U>& value)
    {
        FUint64 size = value.size();

        *this << size;
        if (mIsLoading) {
            value.clear();
            for (FUint64 i = 0; i < size; i++) {
                T key;
                U data;

                *this << key << data;
                value[key] = data;
            }
        } else {
            for (auto& [key, data] : value) {
                *this << key << data;
            }
        }
        return (*this);
    }

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    ///
    /// \param value
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T>
    Archive& operator<<(T& value)
    {
        Serialize(&value, sizeof(T));
        return (*this);
    }

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual bool IsLoading(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual bool IsSaving(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual bool IsAllowingSeek(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual FInt32 GetArchiveVersion(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param version
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void SetArchiveVersion(FInt32 version);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Seek(FUint64 position);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual FUint64 Tell(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual FUint64 TotalSize(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param data
    /// \param length
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Serialize(void* data, FUint64 length);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param data
    /// \param length
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T>
    typename std::enable_if_t<std::is_trivially_copyable_v<T>, void>
    Serialize(T* data, FUint64 length)
    {
        Serialize(static_cast<void*>(data), length * sizeof(T));
    }
};

} // !namespace TKD
