///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils/Archive.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace TKD
///////////////////////////////////////////////////////////////////////////////
namespace TKD
{

///////////////////////////////////////////////////////////////////////////////
Archive::Archive(void)
    : mVersion(0)
    , mIsLoading(false)
    , mIsSaving(false)
    , mAllowSeek(false)
{}

///////////////////////////////////////////////////////////////////////////////
Archive& Archive::operator<<(FString& value)
{
    FUint64 length = value.length();

    *this << length;
    if (mIsLoading) {
        TUniquePtr<char[]> buffer(new char[length + 1]);
        Serialize(buffer.get(), length * sizeof(char));
        buffer[length] = '\0';
        value = FString(buffer.get(), length);
    } else {
        if (length > 0) {
            Serialize(&value[0], length * sizeof(char));
        }
    }
    return (*this);
}

///////////////////////////////////////////////////////////////////////////////
bool Archive::IsLoading(void) const
{
    return (mIsLoading);
}

///////////////////////////////////////////////////////////////////////////////
bool Archive::IsSaving(void) const
{
    return (mIsSaving);
}

///////////////////////////////////////////////////////////////////////////////
bool Archive::IsAllowingSeek(void) const
{
    return (mAllowSeek);
}

///////////////////////////////////////////////////////////////////////////////
FInt32 Archive::GetArchiveVersion(void) const
{
    return (mVersion);
}

///////////////////////////////////////////////////////////////////////////////
void Archive::SetArchiveVersion(FInt32 version)
{
    mVersion = version;
}

///////////////////////////////////////////////////////////////////////////////
void Archive::Seek(FUint64 position)
{
    (void)position;
}

///////////////////////////////////////////////////////////////////////////////
FUint64 Archive::Tell(void) const
{
    return (0);
}

///////////////////////////////////////////////////////////////////////////////
FUint64 Archive::TotalSize(void) const
{
    return (0);
}

///////////////////////////////////////////////////////////////////////////////
void Archive::Serialize(void* data, FUint64 length)
{
    (void)data;
    (void)length;
}

} // !namespace TKD
