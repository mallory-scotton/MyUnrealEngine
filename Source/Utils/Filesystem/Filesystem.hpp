///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils/Types.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace UEB::Fs
///////////////////////////////////////////////////////////////////////////////
namespace UEB::Fs
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param path
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
bool Mkdir(const FPath& path);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param path
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
bool FileExists(const FPath& path);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param path
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
FUint64 FileSize(const FPath& path);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param path
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
bool DeleteFile(const FPath& path);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param oldPath
/// \param newPath
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
bool RenameFile(const FPath& oldPath, const FPath& newPath);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param source
/// \param destination
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
bool CopyFile(const FPath& source, const FPath& destination);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param path
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
TVector<FString> ListDirectory(const FPath& path);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param path
/// \param extensions
/// \param recursive
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
TVector<FString> DiscoverFilesByExtension(
    const FPath& path,
    const TVector<FString>& extensions,
    bool recursive = false
);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param path
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
bool RemoveDirectory(const FPath& path);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param path
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
TVector<FUint8> ReadBinaryFile(const FPath& path);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param path
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
FString ReadFile(const FPath& path);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param path
/// \param content
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
bool WriteFile(const FPath& path, const FString& content);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param path
/// \param content
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
bool AppendToFile(const FPath& path, const FString& content);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param path
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
FString GetFileExtension(const FPath& path);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param path
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
bool IsDirectory(const FPath& path);
///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param path
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
bool IsFile(const FPath& path);

} // !namespace UEB::Fs
