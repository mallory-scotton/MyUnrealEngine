///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils/Types.hpp"
#include "Utils/Archive.hpp"
#include "GraphEditor/UPin.hpp"
#include <imgui_node_editor.h>

///////////////////////////////////////////////////////////////////////////////
// Namespace TKD
///////////////////////////////////////////////////////////////////////////////
namespace TKD
{

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
class UEvaluationContext;
class UNodeBuilder;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class UNode : public std::enable_shared_from_this<UNode>
{
public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    using ID = ax::NodeEditor::NodeId;          //<!
    using PinList = TVector<TSharedPtr<UPin>>;  //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    enum class Type
    {
        Blueprint,      //<!
        Simple,         //<!
        Comment         //<!
    };

public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    static FUint64 sNextID;         //<!
    static UNodeBuilder sBuilder;   //<!

protected:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    ID mID;             //<!
    FString mName;      //<!
    Type mType;         //<!
    ImColor mColor;     //<!
    bool mCanAddPin;    //<!
    PinList mInputs;    //<!
    PinList mOutputs;   //<!
    FString mRegister;  //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    /// \param type
    /// \param color
    ///
    ///////////////////////////////////////////////////////////////////////////
    UNode(
        const FString& name = "",
        Type type = Type::Blueprint,
        ImColor color = ImColor(255, 255, 255)
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~UNode() = default;

protected:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void OnPinAdded(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pin
    ///
    ///////////////////////////////////////////////////////////////////////////
    void AddInputPin(TSharedPtr<UPin> pin);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param type
    /// \param name
    ///
    ///////////////////////////////////////////////////////////////////////////
    void AddInputPin(UPin::Type type, const FString& name = "");

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param pin
    ///
    ///////////////////////////////////////////////////////////////////////////
    void AddOutputPin(TSharedPtr<UPin> pin);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param type
    /// \param name
    ///
    ///////////////////////////////////////////////////////////////////////////
    void AddOutputPin(UPin::Type type, const FString& name = "");

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    ID GetID(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    FString GetName(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Type GetType(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const PinList& GetInputs(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const PinList& GetOutputs(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param reg
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetRegister(const FString& reg);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Render(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param context
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void Evaluate(UEvaluationContext& context) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param archive
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Serialize(UArchive& archive);
};

} // !namespace TKD
