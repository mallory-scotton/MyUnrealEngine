///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "GraphEditor/UNode.hpp"
#include "GraphEditor/UPin.hpp"
#include <SFML/Graphics.hpp>
#include <imgui.h>
#include <imgui_internal.h>

///////////////////////////////////////////////////////////////////////////////
// Namespace UEB
///////////////////////////////////////////////////////////////////////////////
namespace UEB
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class UNodeBuilder
{
private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class Stage
    {
        Invalid,
        Begin,
        Header,
        Content,
        Input,
        Middle,
        Output,
        End
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    sf::Texture mTexture;           //<!
    ImTextureID mHeaderTexture;     //<!
    FUint32 mHeaderWidth;           //<!
    FUint32 mHeaderHeight;          //<!
    ImU32 mHeaderColor;             //<!
    UNode::ID mID;                  //<!
    Stage mStage;                   //<!
    bool mHasHeader;                //<!
    ImVec2 mHeaderMin;              //<!
    ImVec2 mHeaderMax;              //<!
    ImVec2 mContentMin;             //<!
    ImVec2 mContentMax;             //<!
    ImVec2 mNodeMin;                //<!
    ImVec2 mNodeMax;                //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    UNodeBuilder(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~UNodeBuilder();

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param stage
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetStage(Stage stage);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param id
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Begin(UNode::ID id);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void End(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param color
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Header(const ImVec4& color = ImVec4(1, 1, 1, 1));

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void EndHeader(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param id
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Input(UPin::ID id);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void EndInput(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param id
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Output(UPin::ID id);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void EndOutput(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Middle(void);
};

} // !namespace UEB
