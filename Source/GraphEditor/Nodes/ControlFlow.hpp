///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "GraphEditor/UNode.hpp"
#include "GraphEditor/Nodes/Templates.hpp"
#include "GraphEditor/UEvaluationContext.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace UEB::Nodes
///////////////////////////////////////////////////////////////////////////////
namespace UEB::Nodes
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class BranchNode : public UNode
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    BranchNode(void)
        : UNode("Branch")
    {
        AddInputPin(UPin::Type::Flow);
        AddInputPin(UPin::Type::Boolean, "Condition");
        AddOutputPin(UPin::Type::Flow, "True");
        AddOutputPin(UPin::Type::Flow, "False");
    }

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param context
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Evaluate(UEvaluationContext& context) override
    {
        bool flow = context.template GetPinValue<bool>(mInputs[0]);
        bool condition = context.template GetPinValue<bool>(mInputs[1]);

        if (flow) {
            context.template SetPinValue<bool>(mOutputs[0], condition);
            context.template SetPinValue<bool>(mOutputs[1], !condition);
        } else {
            context.template SetPinValue<bool>(mOutputs[0], false);
            context.template SetPinValue<bool>(mOutputs[1], false);
        }
    }
};

} // !namespace UEB::Nodes
