///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils/Types.hpp"
#include "GraphEditor/UPin.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace TKD::Nodes::_impl
///////////////////////////////////////////////////////////////////////////////
namespace TKD::Nodes::_impl
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
template <typename T>
struct UPinType;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
template <>
struct UPinType<float>
{
    static constexpr UPin::Type type = UPin::Type::Float;
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
template <>
struct UPinType<FInt32>
{
    static constexpr UPin::Type type = UPin::Type::Integer;
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
template <>
struct UPinType<FInt64>
{
    static constexpr UPin::Type type = UPin::Type::Integer64;
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
template <>
struct UPinType<bool>
{
    static constexpr UPin::Type type = UPin::Type::Boolean;
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
template <>
struct UPinType<FByte>
{
    static constexpr UPin::Type type = UPin::Type::Byte;
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
template <>
struct UPinType<FString>
{
    static constexpr UPin::Type type = UPin::Type::String;
};

} // !namespace TKD::Nodes::_impl
