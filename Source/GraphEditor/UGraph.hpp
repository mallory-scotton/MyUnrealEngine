///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils/Types.hpp"
#include "GraphEditor/UNode.hpp"
#include "GraphEditor/ULink.hpp"
#include "GraphEditor/UPin.hpp"
#include "GraphEditor/UEvaluationContext.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace TKD
///////////////////////////////////////////////////////////////////////////////
namespace TKD
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class UGraph
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    TVector<TSharedPtr<UNode>> mNodes;  //<!
    TVector<TSharedPtr<ULink>> mLinks;  //<!
    bool mCreating;                     //<!
    FString mSearch;                    //<!
    bool mPopupOpened;                  //<!
    ImVec2 mPosition;                   //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    UGraph(void);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param id
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TSharedPtr<UPin> FindPin(UPin::ID id);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param node
    ///
    ///////////////////////////////////////////////////////////////////////////
    void AddNode(TSharedPtr<UNode> node);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param node
    ///
    ///////////////////////////////////////////////////////////////////////////
    void RemoveNode(TSharedPtr<UNode> node);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param id
    ///
    ///////////////////////////////////////////////////////////////////////////
    void RemoveNode(UNode::ID id);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param source
    /// \param target
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetLink(TSharedPtr<UPin> source, TSharedPtr<UPin> target);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param link
    ///
    ///////////////////////////////////////////////////////////////////////////
    void RemoveLink(TSharedPtr<ULink> link);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param id
    ///
    ///////////////////////////////////////////////////////////////////////////
    void RemoveLink(ULink::ID id);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void HandleCreate(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void HandleDelete(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Render(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param context
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename EventNodeType>
    void Execute(UEvaluationContext& context)
    {
        TSharedPtr<EventNodeType> eventNode = nullptr;

        for (auto& node : mNodes) {
            if (eventNode = std::dynamic_pointer_cast<EventNodeType>(node)) {
                break;
            }
        }

        if (!eventNode) {
            return;
        }

        // TODO: Add execution logic
    }
};

} // !namespace TKD
