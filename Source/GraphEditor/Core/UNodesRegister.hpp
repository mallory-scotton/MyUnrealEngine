///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils/Types.hpp"
#include "GraphEditor/Core/UNode.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace UEB
///////////////////////////////////////////////////////////////////////////////
namespace UEB
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class UNodesRegister
{
public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    using Factory = TFunction<TSharedPtr<UNode>(void)>;     //<!
    using FactoryMap = TUnorderedMap<FString, Factory>;     //<!

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    static FactoryMap mFactories;      //<!
    static TVector<FString> mNames;    //<!
    static FUint64 mBuiltInCount;      //<!

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static FUint64 RegisterBuiltIn(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    ///
    /// \param name
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T, typename... Args>
    static bool Register(const FString& name, Args&&... defaultArgs)
    {
        if (mFactories.find(name) != mFactories.end()) {
            return (false);
        }

        mNames.push_back(name);

        mFactories[name] =
        [args = std::make_tuple(std::forward<Args>(defaultArgs)...)]
        () -> TSharedPtr<UNode> {
            return (std::apply([](auto&&... params) {
                return (std::make_shared<T>(
                    std::forward<decltype(params)>(params)...
                ));
            }, args));
        };

        return (true);
    }

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool Unregister(const FString& name);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static TSharedPtr<UNode> Create(const FString& name);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool IsRegistered(const FString& name);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static TVector<FString> GetNames(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Reset(void);
};

} // !namespace UEB
