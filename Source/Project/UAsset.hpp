///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils/Types.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace TKD
///////////////////////////////////////////////////////////////////////////////
namespace TKD
{

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
class UProject;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class UAsset
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    enum class Type
    {
        Blueprint,
        Texture,
        Sound,
        Level,
        Font,
        Unknown
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    FString mName;                              //<!
    Type mType;                                 //<!
    FPath mPath;                                //<!
    TSharedPtr<UProject> mProject;              //<!
    bool mDirty;                                //<!
    TVector<TSharedPtr<UAsset>> mDependencies;  //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    /// \param type
    /// \param path
    ///
    ///////////////////////////////////////////////////////////////////////////
    UAsset(const FString& name, Type type, const FPath& path);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param type
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static FString TypeToString(Type type);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param type
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static Type StringToType(const FString& type);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const FString& GetName(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetName(const FString& name);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Type GetType(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const FPath& GetPath(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param path
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetPath(const FPath& path);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    TSharedPtr<UProject> GetProject(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param project
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetProject(TSharedPtr<UProject> project);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool IsDirty(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param dirty
    ///
    ///////////////////////////////////////////////////////////////////////////
    void MarkDirty(bool dirty = true);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual bool Save(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual bool Load(void);
};

} // !namespace TKD
